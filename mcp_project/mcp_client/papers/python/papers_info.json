{
  "2305.04311v2": {
    "title": "Egglog Python: A Pythonic Library for E-graphs",
    "authors": [
      "Saul Shanabrook"
    ],
    "summary": "E-graphs have emerged as a versatile data structure with applications in\nsynthesis, optimization, and verification through techniques such as equality\nsaturation. This paper introduces Python bindings for the experimental egglog\nlibrary (previously called egg-smol), which aims to bring the benefits of\ne-graphs to the Python ecosystem. The bindings offer a high-level, Pythonic API\nproviding an accessible and familiar interface for Python users. By integrating\ne-graph techniques with Python, we hope to enable collaboration and innovation\nacross various domains in the scientific computing and machine learning\ncommunities. We discuss the advantages of using Python bindings for both Python\nand existing egg-smol users, as well as possible future directions for\ndevelopment.",
    "pdf_url": "http://arxiv.org/pdf/2305.04311v2",
    "published": "2023-05-07"
  },
  "2207.05613v1": {
    "title": "Making Python Code Idiomatic by Automatic Refactoring Non-Idiomatic Python Code with Pythonic Idioms",
    "authors": [
      "Zejun Zhang",
      "Zhenchang Xing",
      "Xin Xia",
      "Xiwei Xu",
      "Liming Zhu"
    ],
    "summary": "Compared to other programming languages (e.g., Java), Python has more idioms\nto make Python code concise and efficient. Although pythonic idioms are well\naccepted in the Python community, Python programmers are often faced with many\nchallenges in using them, for example, being unaware of certain pythonic idioms\nor do not know how to use them properly. Based on an analysis of 7,638 Python\nrepositories on GitHub, we find that non-idiomatic Python code that can be\nimplemented with pythonic idioms occurs frequently and widely. Unfortunately,\nthere is no tool for automatically refactoring such non-idiomatic code into\nidiomatic code. In this paper, we design and implement an automatic refactoring\ntool to make Python code idiomatic. We identify nine pythonic idioms by\nsystematically contrasting the abstract syntax grammar of Python and Java. Then\nwe define the syntactic patterns for detecting non-idiomatic code for each\npythonic idiom. Finally, we devise atomic AST-rewriting operations and\nrefactoring steps to refactor non-idiomatic code into idiomatic code. We test\nand review over 4,115 refactorings applied to 1,065 Python projects from\nGitHub, and submit 90 pull requests for the 90 randomly sampled refactorings to\n84 projects. These evaluations confirm the high-accuracy, practicality and\nusefulness of our refactoring tool on real-world Python code. Our refactoring\ntool can be accessed at 47.242.131.128:5000.",
    "pdf_url": "http://arxiv.org/pdf/2207.05613v1",
    "published": "2022-07-12"
  }
}